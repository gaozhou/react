using DifferentMethods.React;
using UnityEngine;
[USING]

namespace React.Generated {
    [ATTRIBUTES]
    [System.Serializable]
    public class [CLASSNAME] : DecoratorNode
    {
[FIELDS]
        [COMPONENT_DEC]
        protected override NodeState Execute() 
        {
            if([CODE]) {
                return ExecuteNode(Child);
            }
            return NodeState.NoResult;
        }

        public override string ToString() => NiceName();
        public static string NiceName() => "IF [NICENAME]";
        public static string GetMenuPath() => "[MENUPATH]";
        public static string Signature() => "[SIGNATURE]";
        public override System.Type GetWrappedType() => typeof([COMPONENTTYPE]);
    }

    [ATTRIBUTES]
    [System.Serializable]
    public class Not[CLASSNAME] : DecoratorNode
    {
[FIELDS]
        [COMPONENT_DEC]
        protected override NodeState Execute() 
        {
            if(![CODE]) {
                return ExecuteNode(Child);
            }
            return NodeState.NoResult;
        }

        public override string ToString() => NiceName();
        public static string NiceName() => "IF [NICENAME]";
        public static string GetMenuPath() => "[MENUPATH]";
        public static string Signature() => "[SIGNATURE]";
        public override System.Type GetWrappedType() => typeof([COMPONENTTYPE]);
    }
}
