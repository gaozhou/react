using DifferentMethods.React;
using UnityEngine;
[USING]

namespace React.Generated {
    [ATTRIBUTES]
    [System.Serializable]
    public class [CLASSNAME] : LeafNode
    {
[FIELDS]
        protected [COMPONENTTYPE] Component { get; set; }

        protected override NodeState Execute() {
            if([CODE]) 
                return NodeState.Success;
            return NodeState.Failure;
        }

        public override void OnEnable() => Component = gameObject.GetComponent<[COMPONENTTYPE]>();
        public override string ToString() => NiceName();
        public static string NiceName() => "CHECK [NICENAME]";
        public static string GetMenuPath() => "[MENUPATH]";
        public static string Signature() => "[SIGNATURE]";
        public override System.Type GetWrappedType() => typeof([COMPONENTTYPE]);
    }

    [ATTRIBUTES]
    [System.Serializable]
    public class Not_[CLASSNAME] : LeafNode
    {
[FIELDS]
        protected [COMPONENTTYPE] Component { get; set; }

        protected override NodeState Execute() {
            if(![CODE]) 
                return NodeState.Success;
            return NodeState.Failure;
        }

        public override void OnEnable() => Component = gameObject.GetComponent<[COMPONENTTYPE]>();
        public override string ToString() => NiceName();
        public static string NiceName() => "CHECK NOT [NICENAME]";
        public static string GetMenuPath() => "[MENUPATH]";
        public static string Signature() => "[SIGNATURE]";
        public override System.Type GetWrappedType() => typeof([COMPONENTTYPE]);
    }
}
